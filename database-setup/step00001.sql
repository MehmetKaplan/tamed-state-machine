\connect tsmdb;

--    ____                           _   _                  _                   
--   / ___| ___ _ __   ___ _ __ __ _| |_(_)_ __   __ _     / \   _ __ ___  __ _ 
--  | |  _ / _ \ '_ \ / _ \ '__/ _` | __| | '_ \ / _` |   / _ \ | '__/ _ \/ _` |
--  | |_| |  __/ | | |  __/ | | (_| | |_| | | | | (_| |  / ___ \| | |  __/ (_| |
--   \____|\___|_| |_|\___|_|  \__,_|\__|_|_| |_|\__, | /_/   \_\_|  \___|\__,_|
--                                               |___/                          

-- SCHEMA 

create user tsmapp encrypted password 'tsmapp.';

grant connect on database "tsmdb" to tsmapp;

create schema tsm authorization tsmapp;


-- TABLES

create table tsm.state_machines (
	id integer generated by default as identity primary key,
	name varchar(40),
	description varchar(200),
	valid varchar(1) default 'Y'
);

grant all on tsm.state_machines to tsmapp;

create index state_machines_idx1 on tsm.state_machines (name);

alter table
	tsm.state_machines
add
	constraint state_machines_check1 unique (name);

create table tsm.state_machine_states (
	id integer generated by default as identity primary key,
	sm_id integer,
	state varchar(30),
	state_type varchar(1),
	description varchar(200),
	valid varchar(1) default 'Y'
);

grant all on tsm.state_machine_states to tsmapp;

alter table
	tsm.state_machine_states
add
	constraint state_machine_states_check1 check (state_type in ('I', 'S', 'F'));	

alter table
	tsm.state_machine_states
add
	constraint fk_state_machine_states_state_machines foreign key (sm_id) references tsm.state_machines(id);

create index state_machine_states_idx1 on tsm.state_machine_states (sm_id);

create table tsm.state_machine_state_transitions (
	id integer generated by default as identity primary key,
	sm_id integer,
	from_state varchar(30),
	transition_name varchar(30),
	to_state varchar(30),
	pre_transition_task_name varchar(50),
	post_transition_task_name varchar(50)
);

grant all on tsm.state_machine_state_transitions to tsmapp;

alter table
	tsm.state_machine_state_transitions
add
	constraint fk_state_machine_state_transitions_state_machines foreign key (sm_id) references tsm.state_machines(id);

alter table
	tsm.state_machine_state_transitions
add
	constraint 
		state_machine_state_transitions_check1 unique (sm_id, from_state, transition_name);

create index state_machine_state_transitions_idx1 on tsm.state_machine_state_transitions (sm_id);

create table tsm.instances (
	id integer generated by default as identity primary key,
	external_name varchar(20),
	external_id varchar(20),
	sm_id integer,
	sm_state varchar(30),
	valid varchar(1) default 'Y',
	generated_by varchar(20), 
	generated_at timestamp default current_timestamp
);

grant all on tsm.instances to tsmapp;

create index instances_idx1 on tsm.instances (external_name, external_id);

create index instances_idx2 on tsm.instances (external_id);

create index instances_idx3 on tsm.instances (sm_id);

alter table
	tsm.instances
add
	constraint fk_instances_state_machines foreign key (sm_id) references tsm.state_machines(id);

create table tsm.instance_history (
	id integer generated by default as identity primary key,
	instance_id integer,
	generated_at timestamp default current_timestamp,
	sm_state varchar(30),
	transition_name varchar(30),
	transition_made_by varchar(20),
	comment varchar(200)
);

grant all on tsm.instance_history to tsmapp;

alter table
	tsm.instance_history
add
	constraint fk_instance_history_instances foreign key (instance_id) references tsm.instances(id);

create index instance_history_idx1 on tsm.instance_history (instance_id);